name: model-dev
include:
  - path:
      - ../monitoring/compose.yaml
      - ./overrides.yaml

services:
  kepler-models:
    image: quay.io/sustainable_computing_io/kepler:latest
    ports:
      - 19100:9100
    privileged: true
    pid: host
    networks:
      - kepler-models-network
      - model-server-network
    volumes:
      - type: bind
        source: /proc
        target: /proc
      - type: bind
        source: /sys
        target: /sys
      - type: bind
        source: ./kepler/models/etc/kepler
        target: /etc/kepler

      # NOTE: use the models from the local repo
      - type: bind
        source: ./kepler/common/var/lib/kepler/data
        target: /var/lib/kepler/data

        # NOTE: for estimator - kepler communication
      - estimator-tmp:/tmp

    healthcheck:
      test: curl -f http://localhost:9100/metrics || exit 1
      interval: ${HEALTHCHECK_INTERVAL:-50s}
      timeout: ${HEALTHCHECK_TIMEOUT:-30s}
      retries: ${HEALTHCHECK_RETRIES:-3}
      start_period: ${HEALTHCHECK_START_PERIOD:-1m}

    cap_add:
      - ALL

    entrypoint:
      - /usr/bin/bash
      - -c

    command:
      - |
        echo "Waiting for model-server";
        until [[ "$(curl -s -o /dev/null -w "%{http_code}" http://model-server:8100/best-models)" -eq 200 ]]; do
          echo " ... waiting for model-server";
          sleep 1;
        done;

        echo "Waiting for estimator socket";
        until [[ -e /tmp/estimator.sock ]]; do
          echo " ... waiting for estimator socket";
          sleep 1;
        done;

        echo "starting kepler";
        set -x;
        /usr/bin/kepler \
          -address="0.0.0.0:9100" \
          -disable-power-meter \
          -v="8"

  kepler-metal:
    image: quay.io/sustainable_computing_io/kepler:latest
    ports:
      - 19200:9100
    privileged: true
    pid: host
    networks:
      - kepler-metal-network
    volumes:
      - type: bind
        source: /proc
        target: /proc
      - type: bind
        source: /sys
        target: /sys
      - type: bind
        source: ./kepler/metal/etc/kepler
        target: /etc/kepler

      - type: bind
        source: ./kepler/common/var/lib/kepler/data
        target: /var/lib/kepler/data

    healthcheck:
      test: curl -f http://localhost:9100/metrics || exit 1
      interval: ${HEALTHCHECK_INTERVAL:-50s}
      timeout: ${HEALTHCHECK_TIMEOUT:-30s}
      retries: ${HEALTHCHECK_RETRIES:-3}
      start_period: ${HEALTHCHECK_START_PERIOD:-1m}

    cap_add:
      - ALL

    entrypoint:
      - /usr/bin/bash
      - -c

    command:
      - |
        echo "starting kepler metal";
        set -x;
        /usr/bin/kepler \
          -address="0.0.0.0:9100" \
          -v="8"


  estimator:
    command: [estimator, -l, debug]
    build: &build
      context: ../../../
      dockerfile: dockerfiles/Dockerfile

    volumes:
      - type: bind
        source: ./kepler/models/etc/kepler
        target: /etc/kepler

      - estimator-tmp:/tmp
      - estimator-mnt:/mnt
    networks:
      - kepler-models-network
      - model-server-network

  model-server:
    ports:
      - 18100:8100
    command: [model-server, -l, debug]
    build:
      <<: *build
    volumes:
      - type: bind
        source: ./kepler/models/etc/kepler
        target: /etc/kepler
      - model-server-mnt:/mnt
    networks:
      - model-server-network

volumes:
  # for kepler - estimator sock
  estimator-tmp:

  # for downloading models
  estimator-mnt:
  model-server-mnt:

networks:
  kepler-models-network:
  kepler-metal-network:
  model-server-network:
